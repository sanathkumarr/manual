                                                 terraform user inject
#####################################################################################
sudo su -
hostnamectl set-hostname terra.example.com
bash
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
/usr/local/bin/aws --version
aws configure
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
mkdir project
cd project
vim terra.tf
#############################################################################################
provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "web" {
  ami                    = "ami-05ffe3c48a9991133"
  instance_type          = "t2.micro"
  key_name               = "personal"
  availability_zone      = "us-east-1a"
  vpc_security_group_ids = [data.aws_security_group.previous-sg.id]
  user_data              = <<-EOF
        #!/bin/bash
        sudo yum install httpd -y
        sudo systemctl start httpd
        sudo systemctl enable httpd
        echo "<h1>sample webserver using terraform</h1>" | sudo tee /var/www/html/index.html
  EOF
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "delhi"
  }
}
data "aws_security_group" "previous-sg" {
  id = "sg-02743a2383b035a0d" #existing security group id
}
#################################################################################################
terraform init
terraform fmt
terraform validate
terraform plan
terraform apply

Now paste public ip of newly created instance in browser 
go to newly created instance using terraform connect it through ssh

rpmquery httpd
cd /var/www/html
ll
cat index.html
###################################################################################################################################################################
###################################################################################################################################################################
                                                                VPC USING TERRAFORM
#########################################################################################
sudo su -
hostnamectl set-hostname terra-vpc.example.com
bash
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
/usr/local/bin/aws --version
aws configure
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform
mkdir project-vpc
cd project-vpc
vim terra-vpc.tf
########################################################################################
provider "aws" {
  region = "us-east-1"
}

#This is VPC code

resource "aws_vpc" "test-vpc" {
  cidr_block = "10.0.0.0/16"
}

# this is Subnet code
resource "aws_subnet" "public-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1a"
  cidr_block        = "10.0.0.0/24"

  tags = {
    Name = "Public-subnet"
  }
}


resource "aws_subnet" "private-subnet" {
  vpc_id            = aws_vpc.test-vpc.id
  availability_zone = "us-east-1b"
  cidr_block        = "10.0.1.0/24"

  tags = {
    Name = "Private-subnet" #security group
  }
}
resource "aws_security_group" "test_access" {
  name        = "test_access"
  vpc_id      = aws_vpc.test-vpc.id
  description = "allow ssh and http"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


}
#security group end here#internet gateway code
resource "aws_internet_gateway" "test-igw" {
  vpc_id = aws_vpc.test-vpc.id

  tags = {
    Name = "test-igw"
  }
}


#Public route table code

resource "aws_route_table" "public-rt" {
  vpc_id = aws_vpc.test-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.test-igw.id
  }


  tags = {
    Name = "public-rt"

  }
}
#route Tatable assosication code
resource "aws_route_table_association" "public-asso" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public-rt.id
}
#ec2 code
resource "aws_instance" "sanath-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.public-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "personal"
  tags = {
    Name     = "test-World"
    Stage    = "testing"
    Location = "chennai"
  }
}
##create an EIP for EC2
resource "aws_eip" "sanath-ec2-eip" {
  instance = aws_instance.sanath-server.id
}

###this is database ec2 code
resource "aws_instance" "database-server" {
  ami             = "ami-05ffe3c48a9991133"
  subnet_id       = aws_subnet.private-subnet.id
  instance_type   = "t2.micro"
  security_groups = ["${aws_security_group.test_access.id}"]
  key_name        = "personal"
  tags = {
    Name     = "db-World"
    Stage    = "stage-base"
    Location = "delhi"
  }

}
##create a public ip for Nat gateway
resource "aws_eip" "nat-eip" {
}
### create Nat gateway
resource "aws_nat_gateway" "my-ngw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id     = aws_subnet.public-subnet.id
}

#create private route table
resource "aws_route_table" "private-rt" {
  vpc_id = aws_vpc.test-vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_nat_gateway.my-ngw.id
  }

  tags = {
    Name = "private-rt"
  }
}
##route Tatable assosication code
resource "aws_route_table_association" "private-asso" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private-rt.id
}
################################
terraform init
terraform fmt
terraform validate
terraform plan
terraform apply
##########################################################################################################################
##########################################################################################################################
                          ansible apache
############################################
sudo su -
hostnamectl set-hostname controller.example.com
bash
yum install ansible*
ssh-keygen
cat .ssh/id_rsa.pub

copy the key and paste it in node instance authourized_keys file

another way is editing sshd_config file and restart sshd then ssh-copy-id root@node-public-ip

cd /etc/ansible
vim hosts

##############
[web]
worker ansible_host=172.31.77.239 ansible_user=root
###############

ansible -i hosts all -m ping
vim apache.yaml

##################
---
- name: Install Apache Web Server on Worker Node
  hosts: web
  become: yes
  tasks:
    - name: Install httpd
      yum:
        name: httpd
        state: present

    - name: Start and enable Apache
      service:
        name: httpd
        state: started
        enabled: yes

    - name: Create simple homepage
      copy:
        dest: /var/www/html/index.html
        content: "<h1>Apache Installed by Ansible on EC2</h1>"
########################

ansible-playbook apache.yaml --syntax-check
ansible-playbook apache.yaml -C
ansible-playbook apache.yaml

paste node public ip in web browser url 
http://public_ip:80
####################
in node instance 
sudo su -
cd .ssh
vim authorized_keys
paste controller public key

########################################################################################
########################################################################################
                                              docker nginx
########################################################################################
yum install docker*
systemctl enable docker
systemctl start docker
docker pull nginx
docker run -itd --name sanath -p 8080:80 nginx
docker ps -a

paste http://public_ip:8080
in browser it will open default nginx page


if not 
docker start sanath                   [container_name]
docker exec -it sanath bash

now check in browser again 

if you want to edit default page 
ls
cd /usr
ls
cd share
ls
cd nginx
ls
cat html
cd html
ls
cat index.html
echo "this my server" > index.html
cat index.html

docker attach name/id
